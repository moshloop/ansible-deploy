{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Opionated role for creating shortcuts for various ansible tasks Targets Ansible AWS ECS","title":"Getting Started"},{"location":"#getting-started","text":"Opionated role for creating shortcuts for various ansible tasks","title":"Getting Started"},{"location":"#targets","text":"Ansible AWS ECS","title":"Targets"},{"location":"ansible-addons/","text":"Filters name description dir_exists (path) file_exists (path) from_si_unit (number, base_unit) Converts a SI unit e.g. 1GB into a number with an optional base is_empty (val) jsonpath (data) transforms data using jsonpath_rw map_to_entries (dict, key, value) Convert a dict into a list of entries nestedelement (path) Returns an nested element from an object tree by path (seperated by / or .) play_groups (play_hosts, groups, hostvars) Returns a list of groups that are active within a play split (string, separator=' ') sub_map (dict, prefix) Filter a map by key prefix and remove prefix from keys to_map (map, key, value) walk_up (object, path) Walks up an object tree from the lowest level collecting all attributes not available at lower levels dir_exists when : \"'/path/to/dir' | dir_exists\" file_exists when : \"'/path/to/file' | file_exists\" from_si_unit '1GB' | from_si_unit ( 'MB' ) == 1024 is_empty ' ' | is_empty == true jsonpath map_to_entries nestedelement play_groups split 'one two' | split == [ 'one' , 'two' ] to_map walk_up sub_map sub_map ({ \"elb.check\" : \"/health\" , \"elb.port\" : \"100\" , \"don.t\" : \"match\" }, \"elb.\" ) == { \"check\" : \"/health\" , \"port\" : \"100\" } Modules cloudinit_iso Example - cloudinit_iso : dest : \"{{playbook_dir}}/cloudinit.iso\" user : | #cloud-config preserve_hostname: true hostname: ansible-hostname users: - name: hostname Depdenencies genisoimage systemd_service Option Default Required Description ExecStart Yes Name Yes Description Restart on-failure RunAs root ServiceArgs A dict of key values to add under the [service] section UnitArgs A dict of key values to add under the [unit] section WantedBy multi-user.target state present Example - hosts : all roles : - moshloop.systemd tasks : - systemd_service : Name : test ExecStart : \"/usr/bin/nc -l 200\" - systemd_service : Name : test ExecStart : \"/usr/bin/nc -l 200\" UnitArgs : After : networking.service","title":"Ansible Filters/Modules"},{"location":"ansible-addons/#filters","text":"name description dir_exists (path) file_exists (path) from_si_unit (number, base_unit) Converts a SI unit e.g. 1GB into a number with an optional base is_empty (val) jsonpath (data) transforms data using jsonpath_rw map_to_entries (dict, key, value) Convert a dict into a list of entries nestedelement (path) Returns an nested element from an object tree by path (seperated by / or .) play_groups (play_hosts, groups, hostvars) Returns a list of groups that are active within a play split (string, separator=' ') sub_map (dict, prefix) Filter a map by key prefix and remove prefix from keys to_map (map, key, value) walk_up (object, path) Walks up an object tree from the lowest level collecting all attributes not available at lower levels","title":"Filters"},{"location":"ansible-addons/#dir_exists","text":"when : \"'/path/to/dir' | dir_exists\"","title":"dir_exists"},{"location":"ansible-addons/#file_exists","text":"when : \"'/path/to/file' | file_exists\"","title":"file_exists"},{"location":"ansible-addons/#from_si_unit","text":"'1GB' | from_si_unit ( 'MB' ) == 1024","title":"from_si_unit"},{"location":"ansible-addons/#is_empty","text":"' ' | is_empty == true","title":"is_empty"},{"location":"ansible-addons/#jsonpath","text":"","title":"jsonpath"},{"location":"ansible-addons/#map_to_entries","text":"","title":"map_to_entries"},{"location":"ansible-addons/#nestedelement","text":"","title":"nestedelement"},{"location":"ansible-addons/#play_groups","text":"","title":"play_groups"},{"location":"ansible-addons/#split","text":"'one two' | split == [ 'one' , 'two' ]","title":"split"},{"location":"ansible-addons/#to_map","text":"","title":"to_map"},{"location":"ansible-addons/#walk_up","text":"","title":"walk_up"},{"location":"ansible-addons/#sub_map","text":"sub_map ({ \"elb.check\" : \"/health\" , \"elb.port\" : \"100\" , \"don.t\" : \"match\" }, \"elb.\" ) == { \"check\" : \"/health\" , \"port\" : \"100\" }","title":"sub_map"},{"location":"ansible-addons/#modules","text":"","title":"Modules"},{"location":"ansible-addons/#cloudinit_iso","text":"Example - cloudinit_iso : dest : \"{{playbook_dir}}/cloudinit.iso\" user : | #cloud-config preserve_hostname: true hostname: ansible-hostname users: - name: hostname Depdenencies genisoimage","title":"cloudinit_iso"},{"location":"ansible-addons/#systemd_service","text":"Option Default Required Description ExecStart Yes Name Yes Description Restart on-failure RunAs root ServiceArgs A dict of key values to add under the [service] section UnitArgs A dict of key values to add under the [unit] section WantedBy multi-user.target state present Example - hosts : all roles : - moshloop.systemd tasks : - systemd_service : Name : test ExecStart : \"/usr/bin/nc -l 200\" - systemd_service : Name : test ExecStart : \"/usr/bin/nc -l 200\" UnitArgs : After : networking.service","title":"systemd_service"},{"location":"bootstrapping/","text":"Bootstrapping Name Default Description ssh_key_user ec2-user The name of the preconfigured user in the image ssh_key_full The SSH public key to install as an authorized key for ssh_key_user git_repo git_branch master git_path /etc/repository git_account Optional: The AWS account that git_repo is hosted in git_role Optional: An IAM role in git_account that has codecommit permissions on git_repo phone_home A bash snippet that gets executed at the end of bootstrapping - e.g. To execute an initial Ansible Tower playbook run A cloud-init file is specified on launch that provides: Inserts the ssh_key_full public key into the ssh_key_user 's authorized_keys file Formats and mounts any volumes that have mount params and adds them into /etc/fstab Updates the hostname Updates /etc/environment with the role, purpose, purposeId, environment, region, domain, ami values Configures git to use the git_account/git_role IAM role for AWS CodeCommit checkouts (if specified) Clones git_repo to git_path and installs any git hooks in the .hooks directory and execute the post-merge hook. Installs a systemd service and timer git-sync that keeps the git repo in sync. Executes the script specified in phone_home","title":"Bootstrapping"},{"location":"bootstrapping/#bootstrapping","text":"Name Default Description ssh_key_user ec2-user The name of the preconfigured user in the image ssh_key_full The SSH public key to install as an authorized key for ssh_key_user git_repo git_branch master git_path /etc/repository git_account Optional: The AWS account that git_repo is hosted in git_role Optional: An IAM role in git_account that has codecommit permissions on git_repo phone_home A bash snippet that gets executed at the end of bootstrapping - e.g. To execute an initial Ansible Tower playbook run A cloud-init file is specified on launch that provides: Inserts the ssh_key_full public key into the ssh_key_user 's authorized_keys file Formats and mounts any volumes that have mount params and adds them into /etc/fstab Updates the hostname Updates /etc/environment with the role, purpose, purposeId, environment, region, domain, ami values Configures git to use the git_account/git_role IAM role for AWS CodeCommit checkouts (if specified) Clones git_repo to git_path and installs any git hooks in the .hooks directory and execute the post-merge hook. Installs a systemd service and timer git-sync that keeps the git repo in sync. Executes the script specified in phone_home","title":"Bootstrapping"},{"location":"commands/","text":"commands commands : - echo 123 cancel Shorthand for shell command Shorthand for shell command Shorthand runcmd per instance command Shorthand for an initContainer sidecar Shorthand for shell command","title":"Commands"},{"location":"commands/#commands","text":"commands : - echo 123 cancel Shorthand for shell command Shorthand for shell command Shorthand runcmd per instance command Shorthand for an initContainer sidecar Shorthand for shell command","title":"commands"},{"location":"containers/","text":"Arguments Argument Default Description image [Required] Docker image to run service The name of the systemd service env A dictionary of environment variables to pass through docker_args Additional arguments to the docker client e.g. -p 8080:8080 docker_opts Additional options to the docker client e.g. -H unix:///tmp/var/run/docker.sock args Additional arguments to the container volumes List of volume mappings ports List of port mappings network user-bridge play.yml - hosts : localhost roles : - deploy vars : containers : - image : nginx service : nginx env : DOMAIN : localhost.com - image : nginx service : nginx2 docker_args : -p 8080:80 Docker Compose Docker compose can also be used as a source to deploy to any target. group_vars/group.yml docker_compose_v3 : - files/docker-compose.yml files/docker-compose.yml version : \"3\" services : gateway : image : gateway:4.1.0-SNAPSHOT deploy : resources : limits : memory : 2G environment : - TZ=Africa/Harare ports : - \"8166:8166\" networks : - user networks : user : external : name : public Warning Custom networks are not supported on ECS, All containers run on a single weave network overlay Implemented as systemd services that controls containers Implemented as 1 ECS container per task per service using Weave overlay","title":"Containers"},{"location":"containers/#arguments","text":"Argument Default Description image [Required] Docker image to run service The name of the systemd service env A dictionary of environment variables to pass through docker_args Additional arguments to the docker client e.g. -p 8080:8080 docker_opts Additional options to the docker client e.g. -H unix:///tmp/var/run/docker.sock args Additional arguments to the container volumes List of volume mappings ports List of port mappings network user-bridge play.yml - hosts : localhost roles : - deploy vars : containers : - image : nginx service : nginx env : DOMAIN : localhost.com - image : nginx service : nginx2 docker_args : -p 8080:80","title":"Arguments"},{"location":"containers/#docker-compose","text":"Docker compose can also be used as a source to deploy to any target. group_vars/group.yml docker_compose_v3 : - files/docker-compose.yml files/docker-compose.yml version : \"3\" services : gateway : image : gateway:4.1.0-SNAPSHOT deploy : resources : limits : memory : 2G environment : - TZ=Africa/Harare ports : - \"8166:8166\" networks : - user networks : user : external : name : public Warning Custom networks are not supported on ECS, All containers run on a single weave network overlay Implemented as systemd services that controls containers Implemented as 1 ECS container per task per service using Weave overlay","title":"Docker Compose"},{"location":"environment/","text":"- hosts : localhost roles : - deploy vars : env_vars : httpProxy : 127.0.0.1 tasks : - name : Testing shell : \"cat /etc/environment | grep httpProxy\"","title":"Environment"},{"location":"hooks/","text":"group vars / tasks Automatically imports vault and variables files group tasks Checks for and runs custom tasks for each group, by dynamically include a task list based on group names. e.g. group_names == 'web,prod' will look for and run web.yml and prod.yml in the same directory as the playbook","title":"Hooks"},{"location":"hooks/#group-vars-tasks","text":"Automatically imports vault and variables files","title":"group vars / tasks"},{"location":"hooks/#group-tasks","text":"Checks for and runs custom tasks for each group, by dynamically include a task list based on group names. e.g. group_names == 'web,prod' will look for and run web.yml and prod.yml in the same directory as the playbook","title":"group tasks"},{"location":"load-balancing/","text":"Loadbalancers Docker Compose Load balancers can be specified using annotations in docker-compose files: files/docker-compose.yml version : \"3\" services : ui : labels : elb.ports : \"443:8166\" elb.type : \"https:http\" elb.scheme : internet-facing elb.subnet : Public elb.healthcheck-path : \"/health\" Arguments Name Default Description port type http http,https,tcp scheme internal internet-facing subnet {{subnet_name}} healthcheck-path / healthcheck-port {{port}} healthcheck-protocol {{type}} certificate-arn security-groups","title":"Load Balancing"},{"location":"load-balancing/#loadbalancers","text":"","title":"Loadbalancers"},{"location":"load-balancing/#docker-compose","text":"Load balancers can be specified using annotations in docker-compose files: files/docker-compose.yml version : \"3\" services : ui : labels : elb.ports : \"443:8166\" elb.type : \"https:http\" elb.scheme : internet-facing elb.subnet : Public elb.healthcheck-path : \"/health\"","title":"Docker Compose"},{"location":"load-balancing/#arguments","text":"Name Default Description port type http http,https,tcp scheme internal internet-facing subnet {{subnet_name}} healthcheck-path / healthcheck-port {{port}} healthcheck-protocol {{type}} certificate-arn security-groups","title":"Arguments"},{"location":"storage/","text":"Storage mounts mounts : \"/mnt/point\" : \"nfserver:/volume\" Volumes volumes : - {} Name Default Description size Size in GB of the volume id The name of the volume e.g. volume it will be used as suffix dev The unique device path to use e.g. /dev/xvf , host:/nfs_mount type gp2 format Optional: Partition type e.g. xfs , lvm , nfs mount Optional: Mount point for the volume e.g. /mnt/volume Instance Volume instance_volumes : - {} Name Default Description dev format mount","title":"Storage"},{"location":"storage/#storage","text":"","title":"Storage"},{"location":"storage/#mounts","text":"mounts : \"/mnt/point\" : \"nfserver:/volume\"","title":"mounts"},{"location":"storage/#volumes","text":"volumes : - {} Name Default Description size Size in GB of the volume id The name of the volume e.g. volume it will be used as suffix dev The unique device path to use e.g. /dev/xvf , host:/nfs_mount type gp2 format Optional: Partition type e.g. xfs , lvm , nfs mount Optional: Mount point for the volume e.g. /mnt/volume","title":"Volumes"},{"location":"storage/#instance-volume","text":"instance_volumes : - {} Name Default Description dev format mount","title":"Instance Volume"},{"location":"sysctl/","text":"sysctl sysctls : \"vm.max_map_count\" : 262144","title":"Sysctl"},{"location":"sysctl/#sysctl","text":"sysctls : \"vm.max_map_count\" : 262144","title":"sysctl"},{"location":"systemd/","text":"","title":"Systemd"},{"location":"template/","text":"Files & Templates files files : /etc/some/file : file /etc/some/file2 : file2 templates templates : /etc/some/file : file /etc/some/file2 : file2","title":"Templates"},{"location":"template/#files-templates","text":"","title":"Files &amp; Templates"},{"location":"template/#files","text":"files : /etc/some/file : file /etc/some/file2 : file2","title":"files"},{"location":"template/#templates","text":"templates : /etc/some/file : file /etc/some/file2 : file2","title":"templates"},{"location":"targets/ansible/","text":"Ansible Option Description Support files Map of files to copy native copy module templates Map of templates to render native template module containers List of containers to exectute docker_systemd_service role commands List of commands to execute. native shell module mounts Map of NFS mounts native fstab module sysctls Sysctl variables to set native sysctl module env_vars Environment variables to set /etc/environment","title":"Ansible"},{"location":"targets/ansible/#ansible","text":"Option Description Support files Map of files to copy native copy module templates Map of templates to render native template module containers List of containers to exectute docker_systemd_service role commands List of commands to execute. native shell module mounts Map of NFS mounts native fstab module sysctls Sysctl variables to set native sysctl module env_vars Environment variables to set /etc/environment","title":"  Ansible"},{"location":"targets/ecs/","text":"AWS ECS Supported Arguments Option Description Support files Map of files to copy \u2716 templates Map of templates to render \u2716 containers List of containers to exectute Using ECS Services/Tasks load_balancers List of load balancers Using Application Load Balancers commands List of commands to execute. \u2716 mounts Map of NFS mounts \u2716 sysctls Sysctl variables to set \u2716 env_vars Environment variables to set \u2716 Use container environment Extra Arguments Argument Default Description cluster_name account_id AWS Account ID domain_id Route53 Domain ID region AWS Region cluster_size 3 Initial size of Auto Scaling Group log_retention 7 Number of days to retain CloudWatch logs ssh_key_name ecs_instance_type c4.xlarge ecs_image_id ami-0254e5972ebcd132c ECS AMI Image ID subnet_name APP Subnet prefix to place ECS instances into","title":"AWS ECS"},{"location":"targets/ecs/#aws-ecs","text":"","title":" AWS ECS"},{"location":"targets/ecs/#supported-arguments","text":"Option Description Support files Map of files to copy \u2716 templates Map of templates to render \u2716 containers List of containers to exectute Using ECS Services/Tasks load_balancers List of load balancers Using Application Load Balancers commands List of commands to execute. \u2716 mounts Map of NFS mounts \u2716 sysctls Sysctl variables to set \u2716 env_vars Environment variables to set \u2716 Use container environment","title":"Supported Arguments"},{"location":"targets/ecs/#extra-arguments","text":"Argument Default Description cluster_name account_id AWS Account ID domain_id Route53 Domain ID region AWS Region cluster_size 3 Initial size of Auto Scaling Group log_retention 7 Number of days to retain CloudWatch logs ssh_key_name ecs_instance_type c4.xlarge ecs_image_id ami-0254e5972ebcd132c ECS AMI Image ID subnet_name APP Subnet prefix to place ECS instances into","title":"Extra Arguments"}]}