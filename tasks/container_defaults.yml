
- set_fact:
    _ports: []
    force_sha: "{{container.force_sha | default(containers_force_sha) }}"

- include: _ports.yml
  loop: "{{container.ports | default([]) }}"
  loop_control:
    loop_var: port

- name: Set container defaults
  set_fact:
    _mem: "{{container.mem | default(containers_default_mem) }}"
    _cpu: "{{container.cpu | default(containers_default_cpu) }}"
    _volumes: "{{container.volumes | default([]) }}"
    _files: "{{container.files | default(files) | default({}) }}"
    _templates: "{{container.templates | default(templates) | default({})  }}"
    _service: "{{container.service | default(container.image.split(':')[0]) | basename}}"
    _env: "{{container.env | default(container.env_vars) | default(env_vars) | default({}) }}"
    _labels: "{{container.labels | default(labels) | default({}) }}"
    _commands: "{{container.commands | default(commands) | default([]) }}"
    _image: "{{container.image}}"
    _docker_registry: "{{container.docker_registry | default(docker_registry) }}"

- name: Set docker_registry
  set_fact:
    _image: "{{_docker_registry}}/{{_image}}"
  when: not _docker_registry | is_empty

- name: Lookup image SHA {{_image}}
  block:
    - docker_remote_image_facts:
        image: "{{_image}}"
        username: "{{ docker_username }}"
        password: "{{ docker_password }}"
      register: image_facts
    - debug: var=image_facts verbosity=2
    - set_fact:
        _image: "{{image_facts.registry}}/{{image_facts.image}}@{{image_facts.digest}}"
  when: force_sha == True

- set_fact:
    _container: "{{container | combine({'mem': _mem, 'cpu': _cpu, 'service': _service, 'ports': _ports, 'volumes': _volumes, 'files': _files, 'templates': _templates, 'env': _env, 'labels': _labels, 'image': _image}) }}"

- set_fact:
    _containers: "{{_containers| default([]) + [_container]}}"
