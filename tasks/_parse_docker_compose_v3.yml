- debug: var=svc

- set_fact:
    container: "{{svc.value}}"
    deploy: "{{ svc.get('value', {}).get('deploy', {})}}"



- set_fact:
    image: "{{ container.image }}"
    service: "{{ svc.key | lower}}"
    docker_opts: "{{ container.docker_opts | default('')}}"
    docker_args: "{{ container.docker_args | default('')}}"
    args: "{{ container.args | default('')}}"
    network: "{{container.network | default(network_name) | default('user-bridge') }}"
    volumes: ""
    ports: "{{ container.ports | default([]) }}"
    env: "{{ container.env | default({})}}"
    labels: {}
    loadbalancers: []
    mem: "{{container.mem | default(deploy.get('resources', {}).get('limits', {}).get('memory', container_default_mem)) }}"
    cpu: "{{container.cpu | default(deploy.get('resources', {}).get('limits', {}).get('cpu', container_default_cpu)) }}"
    replicas: "{{ container.replicas | default(deploy.get('replicas', '1')) }}"

- set_fact:
    mem: "{{ mem | from_si_unit('MB')}}"

- set_fact:
    service: "{{service | split(':') | first }}"

- set_fact:
    {env: "{{env | combine({item.split('=')[0]: item.split('=')[1]}) }}"}
  with_items: "{{svc.value.environment | default({}) }}"
  when: svc.value.environment is sequence

- set_fact:
    env: "{{svc.value.environment}}"
  when: svc.value.environment is mapping

- set_fact:
    labels: "{{svc.value.labels}}"
  when: svc.value.labels is mapping

- debug: var=containers
- set_fact:
    containers: "{{containers + [{'image': image,'service': service, 'labels': labels, 'cpu': cpu, 'env': env,  'mem': mem, 'docker_opts':  docker_opts,'docker_args':docker_args,'args': args,'network': network,'volumes': volumes,'ports': ports, 'replicas': replicas   }] }}"